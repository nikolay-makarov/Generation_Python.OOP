"""Класс QuadraticPolynomial
Квадратный трехчлен – это многочлен вида ax**2 + bx + c, где a ≠ 0.
Значение переменной x, при котором квадратный трехчлен обращается в ноль, называют его корнем.
Квадратный трехчлен может иметь один корень, два корня или вовсе не иметь корней.
Реализуйте класс QuadraticPolynomial, описывающий квадратный трехчлен.
При создании экземпляра класс должен принимать три аргумента в следующем порядке:
a — коэффициент a квадратного трехчлена
b — коэффициент b квадратного трехчлена
c — коэффициент c квадратного трехчлена
Экземпляр класса QuadraticPolynomial должен иметь три атрибута:
a — коэффициент a квадратного трехчлена
b — коэффициент b квадратного трехчлена
c — коэффициент c квадратного трехчлена
Класс QuadraticPolynomial должен иметь четыре свойства:
- x1 — свойство, доступное только для чтения, возвращающее корень квадратного трехчлена, вычисленный по формуле:
 x1 = (−b − (b**2 − 4ac)**0.5) / (2 * a)
Если квадратный трехчлен не имеет корней (b**2 − 4ac < 0), значением свойства должно быть значение None.
- x2 — свойство, доступное только для чтения, возвращающее корень квадратного трехчлена, вычисленный по формуле:
x2 = (−b + (b**2 − 4ac)**0.5) / (2 * a)
Если квадратный трехчлен не имеет корней (b**2 − 4ac < 0), значением свойства должно быть значение None.
- view — свойство, доступное только для чтения, возвращающее строку вида: ax^2 + bx + c
где a, b и с представляют коэффициенты квадратного трехчлена
- coefficients — свойство, доступное для чтения и записи, возвращающее кортеж вида: (a, b, c)
где a, b и с представляют коэффициенты квадратного трехчлена.
Примечание 1. Если квадратный трехчлен имеет лишь один корень, значения свойств x1 и x2 должны совпадать.
Примечание 2. При изменении коэффициентов квадратного трехчлена через соответствующие атрибуты или свойство
coefficients значения свойств x1, x2, view и coefficients также должны изменяться.
Примечание 3. Если какие-либо коэффициенты квадратного трехчлена равны нулю,
они по-прежнему должны присутствовать в строке, возвращаемой свойством view, дополнительно их убирать не нужно.
"""


class QuadraticPolynomial:
    def __init__(self, a: int | float, b: int | float, c: int | float) -> None:
        self.a = a
        self.b = b
        self.c = c

    @property
    def x1(self) -> float | None:
        if self.b**2 - 4 * self.a * self.c < 0:
            return None
        return (-self.b - (self.b**2 - 4 * self.a * self.c)**0.5) / (2 * self.a)

    @property
    def x2(self) -> float | None:
        if self.b**2 - 4 * self.a * self.c < 0:
            return None
        return (-self.b + (self.b**2 - 4 * self.a * self.c)**0.5) / (2 * self.a)

    @property
    def view(self) -> str:
        return f'{self.a}x^2 {["+", "-"][self.b < 0]} {abs(self.b)}x {["+", "-"][self.c < 0]} {abs(self.c)}'

    @property
    def coefficients(self) -> tuple[int | float, int | float, int | float]:
        return self.a, self.b, self.c

    @coefficients.setter
    def coefficients(self, new_coefficients):
        self.a, self.b, self.c = new_coefficients


polynom = QuadraticPolynomial(1, 2, -3)

print(polynom.a)        # 1
print(polynom.b)        # 2
print(polynom.c)        # -3

print(polynom.x1)       # -3.0
print(polynom.x2)       # 1.0

print(polynom.view)             # 1x^2 + 2x - 3
print(polynom.coefficients)     # (1, 2, -3)
